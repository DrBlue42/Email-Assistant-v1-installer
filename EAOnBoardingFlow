# First, create the iOS app configuration
# App.json
{
  "expo": {
    "name": "Email Assistant",
    "slug": "email-assistant",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "updates": {
      "fallbackToCacheTimeout": 0
    },
    "assetBundlePatterns": [
      "**/*"
    ],
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.emailassistant.app",
      "buildNumber": "1.0.0",
      "infoPlist": {
        "NSMailUsageDescription": "Email Assistant needs access to your mail to help organize your inbox.",
        "NSAppleEventsUsageDescription": "Email Assistant needs to interact with Mail.app to organize your emails.",
        "UIBackgroundModes": [
          "fetch",
          "processing"
        ]
      }
    }
  }
}

# Create deployment scripts
# scripts/deploy-ios.js
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

async function deployToIOS() {
  try {
    // Build iOS bundle
    console.log('Building iOS bundle...');
    await executeCommand('expo build:ios');

    // Create artifacts directory
    const artifactsDir = path.join(__dirname, '../artifacts');
    if (!fs.existsSync(artifactsDir)) {
      fs.mkdirSync(artifactsDir);
    }

    // Move build artifacts
    console.log('Moving build artifacts...');
    await executeCommand(`mv ./ios/build/EmailAssistant.ipa ${artifactsDir}/`);

    console.log('iOS deployment complete!');
  } catch (error) {
    console.error('Deployment failed:', error);
    process.exit(1);
  }
}

function executeCommand(command) {
  return new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error: ${error}`);
        reject(error);
        return;
      }
      console.log(stdout);
      resolve();
    });
  });
}

deployToIOS();

# Create development environment setup
# scripts/setup-dev.js
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

async function setupDevelopment() {
  try {
    // Check requirements
    checkRequirements();

    // Install dependencies
    console.log('Installing dependencies...');
    execSync('npm install', { stdio: 'inherit' });

    // Setup iOS development environment
    console.log('Setting up iOS development environment...');
    await setupIOSDev();

    // Create development configuration
    createDevConfig();

    console.log('Development environment setup complete!');
  } catch (error) {
    console.error('Setup failed:', error);
    process.exit(1);
  }
}

function checkRequirements() {
  try {
    execSync('xcode-select -p');
  } catch {
    throw new Error('Xcode not found. Please install Xcode first.');
  }

  try {
    execSync('pod --version');
  } catch {
    throw new Error('CocoaPods not found. Please install CocoaPods first.');
  }
}

async function setupIOSDev() {
  // Install iOS dependencies
  execSync('cd ios && pod install', { stdio: 'inherit' });

  // Setup development certificates
  execSync('fastlane init', { stdio: 'inherit' });
}

function createDevConfig() {
  const devConfig = {
    development: true,
    apiUrl: 'http://localhost:3000',
    debugLevel: 'verbose'
  };

  fs.writeFileSync(
    path.join(__dirname, '../config/development.json'),
    JSON.stringify(devConfig, null, 2)
  );
}

setupDevelopment();

# Create Onboarding Flow
# src/ios/components/Onboarding.js
import React, { useState } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Alert } from '@/components/ui/alert';
import { KeyIcon, MailIcon } from 'lucide-react';

const OnboardingFlow = ({ onComplete }) => {
  const [step, setStep] = useState(1);
  const [credentials, setCredentials] = useState({
    email: '',
    password: ''
  });
  const [loading, setLoading] = useState(false);

  const handleNext = async () => {
    if (step === 1 && !credentials.email) {
      Alert.show('Please enter your email address');
      return;
    }

    if (step === 2) {
      if (!credentials.password) {
        Alert.show('Please enter your password');
        return;
      }

      setLoading(true);
      try {
        // Verify credentials
        const isValid = await verifyCredentials(credentials);
        if (!isValid) {
          Alert.show('Invalid credentials. Please try again.');
          return;
        }

        // Store credentials securely
        await AsyncStorage.setItem(
          'credentials',
          JSON.stringify(credentials)
        );

        // Complete onboarding
        onComplete();
      } catch (error) {
        Alert.show('Setup failed. Please try again.');
      } finally {
        setLoading(false);
      }
    } else {
      setStep(step + 1);
    }
  };

  const renderStep = () => {
    switch (step) {
      case 1:
        return (
          <div className="space-y-4">
            <h2 className="text-xl font-semibold">Welcome to Email Assistant</h2>
            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Email Address
              </label>
              <div className="relative">
                <MailIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <input
                  type="email"
                  className="pl-10 w-full rounded-md border-gray-300"
                  value={credentials.email}
                  onChange={e => setCredentials({
                    ...credentials,
                    email: e.target.value
                  })}
                  placeholder="Enter your email"
                />
              </div>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-4">
            <h2 className="text-xl font-semibold">Secure Setup</h2>
            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <div className="relative">
                <KeyIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <input
                  type="password"
                  className="pl-10 w-full rounded-md border-gray-300"
                  value={credentials.password}
                  onChange={e => setCredentials({
                    ...credentials,
                    password: e.target.value
                  })}
                  placeholder="Enter your password"
                />
              </div>
            </div>
          </div>
        );
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          {renderStep()}
          
          <div className="mt-6">
            <button
              onClick={handleNext}
              disabled={loading}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              {loading ? 'Setting up...' : step === 2 ? 'Complete Setup' : 'Next'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OnboardingFlow;

# Add to package.json scripts
{
  "scripts": {
    "deploy:ios": "node scripts/deploy-ios.js",
    "setup:dev": "node scripts/setup-dev.js"
  }
}
